#load to use
load("C:/Users/75747/Desktop/dataapplication925.RData")
x=data$D.p
y=data$dBE.eV
z=data$h.f1
x
n=nrow(x)
p=ncol(x)
#screen down
y=y[-38]
y=y[-27]
x=x[-38,]
x=x[-27,]
x[is.na(x)]<-0
x
load_all()
library(dlbayes)
vs<-function(rho,n,p){
#set up correlation matrix
m<-matrix(NA,p,p)
for(i in 1:p){
for(j in i:p)
m[i,j]=rho^(j-i)}
m[lower.tri(m)]<-t(m)[lower.tri(m)]
#generate x
x=rmvnorm(n,mean=rep(0,p),sigma=m)
#generate beta
beta=c(rep(0,10),runif(n=5,min=-1,max=1),rep(0,20),runif(n=5,min=-1,max=1),rep(0,p-40))
return(rbind(x,beta))
}
data=vs(0.5,100,1000)
library("mvtnorm")
data=vs(0.5,100,1000)
n=100
x=data[1:n,]
beta=data[n+1,]
#calculate y
y=x%*%beta+rnorm(n)
dlresult=dl(x,y)
library("LaplacesDemon")
dlresult=dl(x,y)
library("MASS")
dlresult=dl(x,y)
burn=5000
nmc=5000
thin=1
hyper=1/2
p=ncol(x)
n=nrow(x)
#calculate hyperparameter
xtx=t(x)%*%x
#initial parameters
a=rep(hyper,p)
psi=rexp(p,rate=1/2)
psi1=rep(0,p)
phi=rdirichlet(n=1,alpha=a)
phi[phi <= (1e-40)]<-(1e-40)
tau=rgamma(n=1,shape=p*a,rate=1/2)
Ti=rep(1,p)
beta=rep(0,p)
hi=rep(1,p)
betamatrix<-matrix(rep(NA,nmc*p),nrow=5000)
#Niter iterations
for(i in 1:(burn+nmc)){
#step1:sample sigma^2
s=c(psi*phi^2*tau^2)
E_1=max(t(y-x%*%beta)%*%(y-x%*%beta),1e-8)
E_2=max(sum(beta^2*s),1e-8)
sigma2=1/stats::rgamma(1,(n+p)/2,rate=(E_1+E_2)/2)
sigma1=sqrt(sigma2)
#step2:sample beta
u=rnorm(p)*sqrt(s)
delta=rnorm(n)
v=x%*%u+delta
stx=as.numeric(s)*t(x)
w=ginv(x%*%stx+diag(n))%*%(y/sigma1-v)
beta=(u+(stx%*%w))*sigma1
mix1=abs(beta)/sigma1
mix2=mix1/c(phi)
#step3:sample psi
mu=tau/mix2
pv=(rnorm(p))^2
pu=runif(p)
temp2=mu*pv
temp3=sqrt(4*temp2+temp2^2)
temp4=mu+0.5*(pv*(mu^2))-0.5*(mu*temp3)
locs=(pu<=mu/(mu+temp4))
psi1=locs*temp4+(1-locs)*(mu^2/temp4)
psi=1/psi1
#step4:sample tau
tau=GIGrvg::rgig(n=1,lambda=p*a-p,psi=1,chi=2*sum(mix2))
#step5:sample phi
hu=runif(p,0,exp(-1/(2*hi)))
hl=1/(2*log(1/hu))
hf=pgamma(hl,shape=1-a,rate=mix1)
hr=pmin(runif(p,hf,1),(1-(1e-20)))
hi=qgamma(hr,shape=1-a,rate=mix1)
Ti=1/hi
phi=Ti/sum(Ti)
phi[phi<=(1e-20)]=(1e-20)
#beta output
if(i>burn&&i%%thin==0) betamatrix[(i-burn)/thin,]=beta
if(i%%1000==0) print(i)
}
DL<-function(x,y){
p=ncol(x)
n=nrow(x)
#calculate hyperparameter
xtx=t(x)%*%x
d=eigen(xtx/n)$values
P=sum(d)
Q=4*sum(d^2)-sum(d)^2
R=-sum(d)^3
C=P^2/9-Q/3
A=P*Q/6-P^3/27-R/2
B=A^2-C^3
hyper=sqrt(2/((A+sqrt(B))^(1/3)+sign(A-sqrt(B))*abs(A-sqrt(B))^(1/3)-P/3))
hyper[hyper<1/p]=1/p
#initial parameters
a=rep(hyper,p)
psi=rexp(p,rate=1/2)
psi1=rep(0,p)
phi=rdirichlet(n=1,alpha=a)
phi[phi <= (1e-40)]<-(1e-40)
tau=rgamma(n=1,shape=p*a,rate=1/2)
Ti=rep(1,p)
beta=rep(0,p)
hi=rep(1,p)
betamatrix<-matrix(rep(NA,5000*p),nrow=5000)
#Niter iterations
for(i in 1:10000){
#step1:sample sigma^2
s=c(psi*phi^2*tau^2)
E_1=max(t(y-x%*%beta)%*%(y-x%*%beta),1e-8)
E_2=max(sum(beta^2*s),1e-8)
sigma2=1/stats::rgamma(1,(n+p)/2,rate=(E_1+E_2)/2)
sigma1=sqrt(sigma2)
#step2:sample beta
u=rnorm(p)*sqrt(s)
delta=rnorm(n)
v=x%*%u+delta
stx=as.numeric(s)*t(x)
w=ginv(x%*%stx+diag(n))%*%(y/sigma1-v)
beta=(u+(stx%*%w))*sigma1
mix1=abs(beta)/sigma1
mix2=mix1/c(phi)
#step3:sample psi
mu=tau/mix2
pv=(rnorm(p))^2
pu=runif(p)
temp2=mu*pv
temp3=sqrt(4*temp2+temp2^2)
temp4=mu+0.5*(pv*(mu^2))-0.5*(mu*temp3)
locs=(pu<=mu/(mu+temp4))
psi1=locs*temp4+(1-locs)*(mu^2/temp4)
psi=1/psi1
#step4:sample tau
tau=GIGrvg::rgig(n=1,lambda=p*a-p,psi=1,chi=2*sum(mix2))
#step5:sample phi
hu=runif(p,0,exp(-1/(2*hi)))
hl=1/(2*log(1/hu))
hf=pgamma(hl,shape=1-a,rate=mix1)
hr=pmin(runif(p,hf,1),(1-(1e-20)))
hi=qgamma(hr,shape=1-a,rate=mix1)
Ti=1/hi
phi=Ti/sum(Ti)
phi[phi<=(1e-20)]=(1e-20)
#beta output
if(i>5000) betamatrix[i-5000,]=beta
if(i%%1000==0) print(i)
}
return(betamatrix)
}
#run DL
dlresult=DL(x,y)
hyper=1/2
p=ncol(x)
n=nrow(x)
#calculate hyperparameter
xtx=t(x)%*%x
a=rep(hyper,p)
psi=rexp(p,rate=1/2)
psi1=rep(0,p)
phi=rdirichlet(n=1,alpha=a)
phi[phi <= (1e-40)]<-(1e-40)
tau=rgamma(n=1,shape=p*a,rate=1/2)
Ti=rep(1,p)
beta=rep(0,p)
hi=rep(1,p)
betamatrix<-matrix(rep(NA,5000*p),nrow=5000)
#Niter iterations
for(i in 1:10000){
#step1:sample sigma^2
s=c(psi*phi^2*tau^2)
E_1=max(t(y-x%*%beta)%*%(y-x%*%beta),1e-8)
E_2=max(sum(beta^2*s),1e-8)
sigma2=1/stats::rgamma(1,(n+p)/2,rate=(E_1+E_2)/2)
sigma1=sqrt(sigma2)
#step2:sample beta
u=rnorm(p)*sqrt(s)
delta=rnorm(n)
v=x%*%u+delta
stx=as.numeric(s)*t(x)
w=ginv(x%*%stx+diag(n))%*%(y/sigma1-v)
beta=(u+(stx%*%w))*sigma1
mix1=abs(beta)/sigma1
mix2=mix1/c(phi)
#step3:sample psi
mu=tau/mix2
pv=(rnorm(p))^2
pu=runif(p)
temp2=mu*pv
temp3=sqrt(4*temp2+temp2^2)
temp4=mu+0.5*(pv*(mu^2))-0.5*(mu*temp3)
locs=(pu<=mu/(mu+temp4))
psi1=locs*temp4+(1-locs)*(mu^2/temp4)
psi=1/psi1
#step4:sample tau
tau=GIGrvg::rgig(n=1,lambda=p*a-p,psi=1,chi=2*sum(mix2))
#step5:sample phi
hu=runif(p,0,exp(-1/(2*hi)))
hl=1/(2*log(1/hu))
hf=pgamma(hl,shape=1-a,rate=mix1)
hr=pmin(runif(p,hf,1),(1-(1e-20)))
hi=qgamma(hr,shape=1-a,rate=mix1)
Ti=1/hi
phi=Ti/sum(Ti)
phi[phi<=(1e-20)]=(1e-20)
#beta output
if(i>5000) betamatrix[i-5000,]=beta
if(i%%1000==0) print(i)
}
sigma1
is.na(sigma1)
for(i in 1:10000){
#step1:sample sigma^2
s=c(psi*phi^2*tau^2)
E_1=max(t(y-x%*%beta)%*%(y-x%*%beta),1e-8)
E_2=max(sum(beta^2*s),1e-8)
sigma2=1/stats::rgamma(1,(n+p)/2,rate=(E_1+E_2)/2)
sigma1=sqrt(sigma2)
#step2:sample beta
u=rnorm(p)*sqrt(s)
delta=rnorm(n)
v=x%*%u+delta
stx=as.numeric(s)*t(x)
w=ginv(x%*%stx+diag(n))%*%(y/sigma1-v)
beta=(u+(stx%*%w))*sigma1
mix1=abs(beta)/sigma1
mix2=mix1/c(phi)
#step3:sample psi
mu=tau/mix2
pv=(rnorm(p))^2
pu=runif(p)
temp2=mu*pv
temp3=sqrt(4*temp2+temp2^2)
temp4=mu+0.5*(pv*(mu^2))-0.5*(mu*temp3)
locs=(pu<=mu/(mu+temp4))
psi1=locs*temp4+(1-locs)*(mu^2/temp4)
psi=1/psi1
#step4:sample tau
tau=GIGrvg::rgig(n=1,lambda=p*a-p,psi=1,chi=2*sum(mix2))
#step5:sample phi
hu=runif(p,0,exp(-1/(2*hi)))
hl=1/(2*log(1/hu))
hf=pgamma(hl,shape=1-a,rate=mix1)
hr=pmin(runif(p,hf,1),(1-(1e-20)))
hi=qgamma(hr,shape=1-a,rate=mix1)
Ti=1/hi
phi=Ti/sum(Ti)
phi[phi<=(1e-20)]=(1e-20)
#beta output
if(i>5000) betamatrix[i-5000,]=beta
print(i)
}
a=rep(hyper,p)
psi=rexp(p,rate=1/2)
psi1=rep(0,p)
phi=rdirichlet(n=1,alpha=a)
phi[phi <= (1e-40)]<-(1e-40)
tau=rgamma(n=1,shape=p*a,rate=1/2)
Ti=rep(1,p)
beta=rep(0,p)
hi=rep(1,p)
betamatrix<-matrix(rep(NA,5000*p),nrow=5000)
#step1:sample sigma^2
s=c(psi*phi^2*tau^2)
E_1=max(t(y-x%*%beta)%*%(y-x%*%beta),1e-8)
E_2=max(sum(beta^2*s),1e-8)
sigma2=1/stats::rgamma(1,(n+p)/2,rate=(E_1+E_2)/2)
sigma1=sqrt(sigma2)
#step2:sample beta
u=rnorm(p)*sqrt(s)
delta=rnorm(n)
v=x%*%u+delta
stx=as.numeric(s)*t(x)
w=ginv(x%*%stx+diag(n))%*%(y/sigma1-v)
beta=(u+(stx%*%w))*sigma1
mix1=abs(beta)/sigma1
mix2=mix1/c(phi)
#step3:sample psi
mu=tau/mix2
pv=(rnorm(p))^2
pu=runif(p)
temp2=mu*pv
temp3=sqrt(4*temp2+temp2^2)
temp4=mu+0.5*(pv*(mu^2))-0.5*(mu*temp3)
locs=(pu<=mu/(mu+temp4))
psi1=locs*temp4+(1-locs)*(mu^2/temp4)
psi=1/psi1
#step4:sample tau
tau=GIGrvg::rgig(n=1,lambda=p*a-p,psi=1,chi=2*sum(mix2))
#step5:sample phi
hu=runif(p,0,exp(-1/(2*hi)))
hl=1/(2*log(1/hu))
hf=pgamma(hl,shape=1-a,rate=mix1)
hr=pmin(runif(p,hf,1),(1-(1e-20)))
hi=qgamma(hr,shape=1-a,rate=mix1)
Ti=1/hi
phi=Ti/sum(Ti)
phi[phi<=(1e-20)]=(1e-20)
#beta output
if(i>5000) betamatrix[i-5000,]=beta
print(i)
}
for(i in 1:10000){
#step1:sample sigma^2
s=c(psi*phi^2*tau^2)
E_1=max(t(y-x%*%beta)%*%(y-x%*%beta),1e-8)
E_2=max(sum(beta^2*s),1e-8)
sigma2=1/stats::rgamma(1,(n+p)/2,rate=(E_1+E_2)/2)
sigma1=sqrt(sigma2)
#step2:sample beta
u=rnorm(p)*sqrt(s)
delta=rnorm(n)
v=x%*%u+delta
stx=as.numeric(s)*t(x)
w=ginv(x%*%stx+diag(n))%*%(y/sigma1-v)
beta=(u+(stx%*%w))*sigma1
mix1=abs(beta)/sigma1
mix2=mix1/c(phi)
#step3:sample psi
mu=tau/mix2
pv=(rnorm(p))^2
pu=runif(p)
temp2=mu*pv
temp3=sqrt(4*temp2+temp2^2)
temp4=mu+0.5*(pv*(mu^2))-0.5*(mu*temp3)
locs=(pu<=mu/(mu+temp4))
psi1=locs*temp4+(1-locs)*(mu^2/temp4)
psi=1/psi1
#step4:sample tau
tau=GIGrvg::rgig(n=1,lambda=p*a-p,psi=1,chi=2*sum(mix2))
#step5:sample phi
hu=runif(p,0,exp(-1/(2*hi)))
hl=1/(2*log(1/hu))
hf=pgamma(hl,shape=1-a,rate=mix1)
hr=pmin(runif(p,hf,1),(1-(1e-20)))
hi=qgamma(hr,shape=1-a,rate=mix1)
Ti=1/hi
phi=Ti/sum(Ti)
phi[phi<=(1e-20)]=(1e-20)
#beta output
if(i>5000) betamatrix[i-5000,]=beta
print(i)
}
s=c(psi*phi^2*tau^2)
psi
phi^2
if(abs(beta)>0) print("0")
ti=1
tu=runif(p,0,exp(-1/(2*hi)))
tl=1/(2*log(1/hu))
tf=pgamma(hl,shape=p-p*a,rate=2*sum(mix2))
tr=pmin(runif(1,tf,1),(1-(1e-20)))
ti=qgamma(tr,shape=p-p*a,rate=2*sum(mix2))
tau=1/ti
tau
tu=runif(p,0,exp(-1/(2*ti)))
tu=runif(1,0,exp(-1/(2*ti)))
ti
ti=1
tu=runif(1,0,exp(-1/(2*ti)))
tu
tl=1/(2*log(1/tu))
tl
tf=pgamma(hl,shape=p-p*a,rate=2*sum(mix2))
tf
tf=pgamma(tl,shape=p-p*a,rate=2*sum(mix2))
tf
tl
tf=pgamma(tl,shape=p-p*a,rate=2*sum(mix2))
2*sum(mix2)
tf=pgamma(tl,shape=p-p*a,rate=
1)
tf
library(dlbayes)
install.packages("usethis")
library(usethis)
install.packages("devtools")
library(devtools)
devtools::load_all(".")
library(roxygen2)
devtools::load_all(".")
usethis::use_package("GIGrvg")
usethis::use_package("expm")
usethis::use_package("glmnet")
usethis::use_package("MASS")
install.packages("Rd2roxygen")
usethis::use_package("LaplacesDemon")
install.packages("roxygen2")
library(dlbayes)
usethis::use_package("stats")
usethis::use_package("graphics")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(devtools)
library(roxygen2)
document()
document()
load_all()
library("usethis", lib.loc="D:/R-3.5.1/library")
usethis::use_package("LaplaceDemon")
library("LaplacesDemon", lib.loc="D:/R-3.5.1/library")
usethis::use_package("LaplaceDemon")
usethis::use_readme_md()
